apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: prometheus-operator
  namespace: kube-system
spec:
  repo: https://prometheus-community.github.io/helm-charts
  version: 49.2.0
  chart: kube-prometheus-stack
  targetNamespace: monitoring
  valuesContent: |-
    nameOverride: prometheus-operator
    prometheus:
      prometheusSpec:
        enableRemoteWriteReceiver: true
        enableFeatures:
          - exemplar-storage
    grafana:
      fullnameOverride: grafana
      grafana.ini:
        auth:
          disable_login_form: true
        auth.anonymous:
          enabled: true
          org_role: "Admin"
      sidecar:
        datasources:
          exemplarTraceIdDestinations:
            datasourceUid: tempo
            traceIdLabelName: trace_id
      additionalDataSources:
        - name: Jaeger
          type: jaeger
          access: proxy
          url: http://tempo.tracing:16686/jaeger
          uid: jaeger
        - name: Tempo
          type: tempo
          access: proxy
          url: http://tempo.tracing:3100
          uid: tempo
          jsonData:
            tracesToLogsV2:
              # Field with an internal link pointing to a logs data source in Grafana.
              # datasourceUid value must match the uid value of the logs data source.
              datasourceUid: 'loki'
              spanStartTimeShift: '1h'
              spanEndTimeShift: '-1h'
              tags: ['job', 'instance', 'pod', 'namespace', 'app']
              filterByTraceID: true
              filterBySpanID: false
            tracesToMetrics:
              datasourceUid: 'prometheus'
              spanStartTimeShift: '1h'
              spanEndTimeShift: '-1h'
              tags: [{ key: 'service.name', value: 'service' }, { key: 'job' }]
              queries:
                - name: 'Request duration'
                  query: 'histogram_quantile(0.95, sum(rate(http_server_request_seconds_bucket{$$__tags}[1m])) by (le))'
                - name: 'Request count'
                  query: 'sum by(status, uri) (rate(http_server_requests_total{$$__tags}[1m]))'
            serviceMap:
              datasourceUid: 'prometheus'
            nodeGraph:
              enabled: true
            search:
              hide: false
            lokiSearch:
              datasourceUid: 'loki'
            traceQuery:
              timeShiftEnabled: true
              spanStartTimeShift: '1h'
              spanEndTimeShift: '-1h'
            spanBar:
              type: 'Tag'
              tag: 'http.path'
        - name: Loki
          type: loki
          access: proxy
          url: http://loki-stack.logging:3100
          uid: loki
          jsonData:
            maxLines: 1000
            derivedFields:
              - datasourceUid: tempo
                matcherRegex: "\"traceId\":\\s?\"(\\w+)\""
                name: TraceId
                # url will be interpreted as query for the datasource
                url: '$${__value.raw}'
                # optional for URL Label to set a custom display label for the link.
                urlDisplayLabel: 'View Trace'
    extraManifests:
      - apiVersion: monitoring.coreos.com/v1
        kind: ServiceMonitor
        metadata:
          name: istio-federation
          labels:
            app.kubernetes.io/name: istio-prometheus
            release: prometheus-operator
        spec:
          namespaceSelector:
            matchNames:
            - istio-system
          selector:
            matchLabels:
              app: prometheus
          endpoints:
          - interval: 30s
            scrapeTimeout: 30s
            params:
              'match[]':
              - '{__name__=~"workload:(.*)"}'
              - '{__name__=~"pilot(.*)"}'
            path: /federate
            targetPort: 9090
            honorLabels: true
            metricRelabelings:
            - sourceLabels: ["__name__"]
              regex: 'workload:(.*)'
              targetLabel: "__name__"
              action: replace
          - interval: 30s
            scrapeTimeout: 30s
            params:
              'match[]':
              - '{__name__=~"istio:(.*)"}'
            path: /federate
            targetPort: 9090
            honorLabels: true
            metricRelabelings:
            - sourceLabels: ["__name__"]
              regex: "istio:(.*)"
              targetLabel: "__name__"
              action: replace
            - sourceLabels: ["source_app"]
              regex: '(.*)'
              replacement: '$1'
              targetLabel: app
            - sourceLabels: ["source_version"]
              regex: '(.*)'
              replacement: '$1'
              targetLabel: version
