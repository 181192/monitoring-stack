apiVersion: v1
kind: Namespace
metadata:
  labels:
    istio-injection: enabled
  name: demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: query-backend
  namespace: demo
  labels:
    app.kubernetes.io/name: query-backend
    app.kubernetes.io/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: query-backend
      app.kubernetes.io/version: v1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: query-backend
        app.kubernetes.io/version: v1
    spec:
      containers:
        - name: query-backend
          image: kalli.dev/02-tracing-java:latest
          imagePullPolicy: Never
          env:
            - name: SPRING_APPLICATION_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: MANAGEMENT_OTLP_TRACING_ENDPOINT
              value: "http://tempo.tracing:4318/v1/traces"
            - name: CLIENTS_WEATHER_BASEURL
              value: "http://weather-service:8080"
            - name: CLIENTS_GEOLOCATION_BASEURL
              value: "http://weather-service:8080"
            - name: OPEN_API_KEY
              valueFrom:
                secretKeyRef:
                  name: query-backend
                  key: open-api-key
          ports:
            - containerPort: 8080
          securityContext:
            runAsUser: 1000
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: query-backend
  namespace: demo
  labels:
    app.kubernetes.io/name: query-backend
    app.kubernetes.io/version: v1
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app.kubernetes.io/name: query-backend
    app.kubernetes.io/version: v1
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: query-backend
  namespace: demo
  labels:
    app.kubernetes.io/name: query-backend
    app.kubernetes.io/version: v1
    release: prometheus-operator
spec:
  endpoints:
  - interval: 5s
    path: /actuator/prometheus
    port: http
  selector:
    matchLabels:
      app.kubernetes.io/name: query-backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-service
  namespace: demo
  labels:
    app.kubernetes.io/name: weather-service
    app.kubernetes.io/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: weather-service
      app.kubernetes.io/version: v1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: weather-service
        app.kubernetes.io/version: v1
    spec:
      containers:
        - name: weather-service
          image: kalli.dev/02-tracing-js:latest
          imagePullPolicy: Never
          env:
            - name: SERVICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: OTEL_EXPORTER_OTLP_HTTP_ENDPOINT
              value: "http://tempo.tracing:4318/v1/traces"
            - name: GOOGLE_MAPS_API_KEY
              valueFrom:
                secretKeyRef:
                  name: weather-service
                  key: google-maps-api-key
          ports:
            - containerPort: 8080
          securityContext:
            runAsUser: 1000
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: weather-service
  namespace: demo
  labels:
    app.kubernetes.io/name: weather-service
    app.kubernetes.io/version: v1
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app.kubernetes.io/name: weather-service
    app.kubernetes.io/version: v1
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: weather-service
  namespace: demo
  labels:
    app.kubernetes.io/name: weather-service
    app.kubernetes.io/version: v1
    release: prometheus-operator
spec:
  endpoints:
  - interval: 5s
    path: /metrics
    port: http
  selector:
    matchLabels:
      app.kubernetes.io/name: weather-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: demo
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
      app.kubernetes.io/version: v1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: frontend
        app.kubernetes.io/version: v1
    spec:
      containers:
        - name: frontend
          image: kalli.dev/02-tracing-go:latest
          imagePullPolicy: Never
          env:
            - name: SERVICE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: ENVIRONMENT
              value: "production"
            - name: OTEL_EXPORTER_OTLP_GRPC_ENDPOINT
              value: "tempo.tracing:4317"
            - name: WEATHER_SERVICE_URL
              value: "http://query-backend:8080"
          ports:
            - containerPort: 8080
          securityContext:
            runAsUser: 1000
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "100m"
              memory: "256Mi"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: demo
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/version: v1
spec:
  ports:
    - port: 8080
      name: http
  selector:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/version: v1
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: frontend
  namespace: demo
  labels:
    app.kubernetes.io/name: frontend
    app.kubernetes.io/version: v1
    release: prometheus-operator
spec:
  endpoints:
  - interval: 5s
    path: /metrics
    port: http
  selector:
    matchLabels:
      app.kubernetes.io/name: frontend
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: frontend
  namespace: demo
spec:
  gateways:
    - istio-system/ingressgateway
  hosts:
    - '*'
  http:
    - name: "frontend"
      match:
        - uri:
            prefix: "/"
      route:
        - destination:
            host: frontend
            port:
              number: 8080
